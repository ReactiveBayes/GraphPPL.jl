---
description: 
globs: 
alwaysApply: true
---
# GraphPPL.jl Overview

GraphPPL.jl is a probabilistic programming language focused on probabilistic graphical models. It materializes models as factor graphs and provides tools for model specification.

## Main Components

The main entry point is [src/GraphPPL.jl](mdc:src/GraphPPL.jl), which includes all the core modules.

### Core Structure
- **Core**: Basic functionality and interfaces
- **Graph**: Factor graph representation and manipulation
- **Macros**: DSL for model specification via `@model` macro
- **Model**: Model representation classes
- **Nodes**: Graph node representation and behavior
- **Generators**: Code generation tools
- **Plugins**: Extension system for backend integration
- **Utils**: Helper functions and utilities

### Testing
Tests are organized in the [test](mdc:test) directory, mirroring the source code structure. The test suite uses ReTestItems with `@testitem` blocks for self-contained tests. The [test/runtests.jl](mdc:test/runtests.jl) file is the entry point for running all tests.

### Benchmarking
Performance benchmarks are in the [benchmark](mdc:benchmark) directory, using BenchmarkTools.jl. Run all benchmarks using [benchmark/benchmarks.jl](mdc:benchmark/benchmarks.jl).

## Naming Conventions
- Use snake_case for function and variable names
- Use PascalCase for type names (structs and abstract types)
- Add comprehensive docstrings to functions and types
- Use `@kwdef` macro for structs to enable keyword constructors